Components and Explanation:
Bevy App and Plugins:

```
App::new()
    .add_plugins(DefaultPlugins)
    .add_plugins(EguiPlugin)
    .insert_resource(ClearColor(Color::rgb(214.0 / 255.0, 204.0 / 255.0, 185.0 / 255.0)))
    .add_systems(Update, ui_system)
    .run();
```

App::new(): Initializes a new Bevy application.
add_plugins(DefaultPlugins): Adds a set of default plugins that include window handling, asset loading, etc.
add_plugins(EguiPlugin): Adds the Egui plugin for GUI support in your Bevy application.
insert_resource(ClearColor(Color::rgb(...))): Sets the background color of the application window using RGB values.
add_systems(Update, ui_system): Registers the ui_system function to run every frame. This handles the user interface logic.
run(): Starts the application.
How to modify:

Change Color::rgb() values to modify the background color.
Add or remove plugins using .add_plugins(). You can add custom plugins or others like AudioPlugin, etc.
Modify the ui_system or add more systems to handle additional gameplay or UI logic.
UI System:

```
fn ui_system(
    mut contexts: EguiContexts,
    mut input_text: Local<String>,
    mut file_name: Local<String>,
    mut folder_name: Local<String>,
    mut show_file_popup: Local<bool>,
    mut show_folder_popup: Local<bool>,
    mut files_and_folders: Local<Vec<PathBuf>>,
    mut loaded_file: Local<Option<PathBuf>>,
    mut current_dir_str: Local<String>,
) {
// System logic for handling UI events
}
```

mut contexts: EguiContexts: The context for Egui, which is used to build and manage UI components.
mut input_text: Local<String>: Holds the content of a file when opened and is used for editing.
mut file_name: Local<String> and mut folder_name: Local<String>: Used to store names for newly created files or folders.
mut show_file_popup: Local<bool> and mut show_folder_popup: Local<bool>: Used to toggle visibility for popups related to file or folder creation.
mut files_and_folders: Local<Vec<PathBuf>>: Holds the current directoryâ€™s files and folders to display in the UI.
mut loaded_file: Local<Option<PathBuf>>: Tracks the currently loaded file.
mut current_dir_str: Local<String>: The string representing the current directory in the file explorer.
How to modify:

Modify input_text, file_name, folder_name, etc., to change how files/folders are handled.
Add more UI components (e.g., buttons, input fields) for new features.
Popups and File Operations:

Creating files and folders:

show_file_name_popup() and show_folder_name_popup(): Display text input fields to enter names for files or folders.
create_file() and create_folder(): Create a new file or folder in the current directory.
How to modify:

To create custom file/folder creation logic, adjust the contents of create_file() and create_folder() with your own validation, file naming conventions, etc.
You can modify the popups to accept more advanced file/folder attributes, such as default content for files or folder permissions.
Opening and saving files:

open_file_content(): Opens a file for reading and loads its contents into the input_text field.
save_content(): Saves the content of input_text to the currently loaded file.
How to modify:

You can enhance the file loading/saving to handle more complex file formats or interact with different storage (e.g., cloud storage).
Modify how content is saved, such as adding auto-save functionality or versioning for file content.
Egui UI Layout and Interaction:
```
egui::CentralPanel::default()
    .frame(egui::Frame::none())
    .show(contexts.ctx_mut(), |ui| {
        ui.vertical(|ui| {
            // Layout for directory display and file interaction
            ui.horizontal(|ui| {
                ui.label("Current Directory: ");
                ui.text_edit_singleline(&mut *current_dir_str); 
            });

            // Button actions for creating files/folders
            if ui.button("Create File").clicked() {
                *show_file_popup = true;
            }

            if ui.button("Create Folder").clicked() {
                *show_folder_popup = true;
            }

            // File/folder list display and interactions
            ui.horizontal(|ui| {
                ui.label("Files and Folders in current directory: ");
                for item in files_and_folders.iter() {
                    let item_name = item.file_name().unwrap_or_default().to_string_lossy();
                    if item.is_dir() {
                        if ui.button(format!("Folder: {}", item_name)).clicked() {
                            // Navigate into folder logic
                        }
                    } else {
                        if ui.button(format!("File: {}", item_name)).clicked() {
                            // Open file logic
                        }
                    }
                }
            });

            // Display the content of loaded file and buttons for saving/canceling
            let input_size = egui::vec2(ui.available_width(), ui.available_height());
            ui.add_sized(input_size, egui::TextEdit::multiline(&mut *input_text).desired_rows(10));
        });
    });
```
egui::CentralPanel::default(): Creates a central panel that will contain your UI elements.
ui.horizontal() and ui.vertical(): Used for laying out widgets in horizontal and vertical orientations, respectively.
ui.button(): Displays a button. The logic inside .clicked() determines the action when the button is clicked.
ui.text_edit_singleline(): A single-line input field for editing the current directory and file names.
ui.add_sized(): Used to define the size of an input field, such as the multiline text input used for file content.
How to modify:

To change the layout or add more UI components, adjust the structure inside ui.horizontal() and ui.vertical().
Modify the interactions by changing button actions or adding more logic to interact with directories, files, or custom components.


// RIGHT CLICK & IMAGE BUTTON

let logo = ui.add(egui::ImageButton::new(egui::Image::new(egui::include_image!("assets/folder.png")).max_width(120.00)));
if logo.secondary_clicked() {
    println!("right click");
};

// Context Menu
logo.context_menu(|ui| {
    if ui.button("Close the menu").clicked() {
        ui.close_menu();
    }
});